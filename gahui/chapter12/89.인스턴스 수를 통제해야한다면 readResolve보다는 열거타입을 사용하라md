## 89.인스턴스 수를 통제해야한다면 readResolve보다는 열거타입을 사용하라
> 불변식을 지키기 위해 인스턴스를 통제해야 한다면, 열거 타입을 사용하자
> 직렬화와 인스턴스 통제가 모두 필요하다면, readResolve 메서드를 사용하고 그 클래스에서 모든 참조 타입 인스턴스 필드를 transient로 선언하자.

</br>

### 싱글턴에서 implements Serializable을 쓴다면?
- 더 이상 싱글턴이 아니게 된다.
- 꼭 기본 직렬화가 아니라 명시적인 readObejct를 제공하더라도 클래스가 초기화될 때 만드러진 인스턴스와는 별개로 만들어진다.
- 싱글턴을 유지할 수 있는 방법은 있다
    - readResolve 메서드 사용

</br>
</br>

### readResolve 메서드
- readObject가 만들어낸 인스턴스를 다른 것으로 대체할 수 있다.
- 역직렬화한 객체의 클래스가 readResolve 메서드를 적절히 정의해뒀다면, 역직렬화 후 새로 생성된 객체를 인수로 이 메서드가 호출된다.
    - 새로 생성된 객체는 가비지 컬렉션 대상이 된다.
- 예시
    ```java
    public class Elvis {
        public static final Elvis INSTANCE = new Elvis();
        private Elvis() {}

        public void leaveTheBuilding() {}
    
        private Object readResolve() { return INSTANCE;}
    }
    ```
    - 해당 예시에서 직렬화 형태는 아무런 실 데이터를 가질 이유가 없으니, 인스턴스 필드 모두 transient로 선언해야 한다.
    - __readResolve를 인스턴스 통제 목적으로 사용한다면 객체 참조 타입 인스턴스 필드를 모두 transient로 선언해야 한다.__


</br>
</br>

### 만약, transient로 선언되어 있지 않다면?
- transient로 선언되지 않은 필드를 readResolve 메서드가 실행되기 전에 역직렬화한다.
- ex) 잘못된 싱글턴
    ```java
    public class Elvis implements Serializable {
        public static final Elvis INSTANCE = new Elvis();
        private Elvis() {}

        private String[] favoriteSongs = {"Hound Dog", "Heartbreak Hotel"};

        public void printFavorites() { System.out.println(Arrays.toString(favoriteSongs)); }

        private Object readResolve() { return INSTANCE; }
    }
    ```

- ex) 도둑 클래스 
    ```java
    public class ElvisStealer implements Serializable {
        static Elvis impersonator;
        private Elvis payload;

        private Object readResolve() {
            //resolve되기 전의 Elvis 인스턴스의 참조를 저장한다.
            impersonator = payload;

            // favoriteSongs 필드에 맞는 타입의 객체를 반환한다.
            return new String[] {"A Fool Such as I"};
        }
    
        private static final long serialVersionUID = 0;
    }
    ```

</br>
</br>

### 열거 타입 싱글턴
```java
public enum EnumElvis {
    INSTANCE;
    private String[] favoriteSongs = {"Hound Dog", "Heartbreak Hotel"};
    public void printFavorites() { System.out.println(Arrays.toString(favoriteSongs)); }
}
```
- 

</br>
</br>